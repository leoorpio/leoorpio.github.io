---
layout: post
date: 2016-07-29 23:15:42 +0800
title: JSON
categories: JavaScript
tags:
 - JavaScript
---

JSON（[介绍](http://www.json.org/json-zh.html)）：JavaScript Object Notation，中文意思：JavaScript对象表示法。  


- [JSON参考文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON)  
- [JSON在线校验网站](http://www.kjson.com/)

JSON是一种轻量级的数据交换格式，它是JavaScript的一个严格的子集，利用了JavaScript的一些模式来表示结构化数据，易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。  

JSON和对象字面量表示法非常相似，但是二者之间又有两个关键的区别：对象字面量表示法使用单引号或双引号封装`属性名`，甚至可以不使用任何引号，而在JSON中却是强制使用引号的。另外，JSON中所有字符串都需要包含在双引号中。


在node.js中，我们经常使用V8的JSON.parse和JSON.stringify。前者接受一个JSON字符串作为参数，并将其转换为一个对象（如果失败，则抛出一个错误），而后者接收一个对象作为参数，并返回一个JSON字符串表示。  


### 优点
1. 易于阅读
2. 方便转换，网上有很多JSON API提供JSON字符串和对象之间的相互转换。



ECMAScript 5 定义了一个原生的JSON对象，可以用来将对象序列化（stringify）成JSON字符串或者将JSON数据解析（parse）为JavaScript对象。

JSON的语法可以表示以下三种类型的值：

```
简单值（语法同JavaScript）：string、number、false、true、null。注意，不支持JavaScript中的特殊值undefined（与含双引号的不等同："undefined"）。
对象：表示一组无序的键值对。每个键值对中的值可以是简单值，也可以是复杂数据类型的值。
数组：表示一组有序的列表，可以通过数值索引来访问其中的值。数据的值也可以是任意类型：简单值、对象或数组。

```  

此外  

```
JSON不支持变量、函数、或对象实例
```

### JSON方法 

```
JSON.stringigy():接收一个对象作为参数，并返回一个JSON字符串表示
JSON.parse():接受一个JSON字符串作为参数，并将其转换为一个对象（如果失败，则抛出一个错误）
```
### 1. JSON.parse  

JSON.parse() 方法可以将一个 JSON 字符串解析成为一个 JavaScript 值。在解析过程中，还可以选择性的修改某些属性的原始解析值。  

**语法**  

```javascript
JSON.parse(text[, reviver])

```


**参数**

```  
text
    要解析的 JSON 字符串，可以查看 JSON 一文了解 JSON 的语法。
reviver（k， v） 可选（还原函数）
    一个函数，用来转换解析出的属性值。 接受两个参数，一个键和一个值。  
    1. 如果 reviver 返回 undefined，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。
    2. 解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用 reviver 函数，在调用过程中，当前属性所属的对象会作为 this 值
    3. 当遍历到最顶层的值（解析值）时，传入 reviver 函数的参数会是空字符串 ""（因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的 this 值会是 {"": 修改过的解析值} 
```  


**返回值**  

```
从 text 字符串解析出的一个 Object。
``` 

**异常**  

```
如果被解析的 JSON 字符串包含语法错误，则会抛出 SyntaxError 异常。
```  


```javascript
JSON.parse('{}');              // {}
JSON.parse('true');            // true
JSON.parse('"Zoro"');           // "Zoro"
JSON.parse('[1, 5, "false"]'); // [1, 5, "false"]
JSON.parse('{"array":[1, 5, "false"]}');  //{ array: [1, 5, "false"] }
JSON.parse('null');            // null

```

在将日期字符串转换为Date对象时，经常要用到还原函数。  

```javascript  
var book = {
			"title": "Professional JavaScript",
			"authors": [
				"Nicholas C. Zakas"
			],
			edition: 3,
			year: 2011,
			releaseDate: new Date(2011, 11, 1)
};

// "{"title":"Professional JavaScript","authors":["Nicholas C. Zakas"],"edition":3,"year":2011,"releaseDate":"2011-11-30T16:00:00.000Z"}"
var jsonText = JSON.stringify(book);

var bookCopy = JSON.parse(jsonText, function(k, v) {
	if(k == "releaseDate") {
		return new Date(v);
	}else {
		return v;
	};		
});

console.log(bookCopy.releaseDate.getFullYear());  // 2011

```  

**注意**:JSON.parse() 不允许用逗号作为结尾。如下，错误出现提示
```javascirpt
JSON.parse('{"foo" : 1, }');  
SyntaxError: JSON.parse: unexpected character at line 1 column 14 of the JSON data
```


### 2 JSON.stringify  

JSON.stringify() 方法可以将任意的 JavaScript 值序列化成 JSON 字符串。  

默认情况下，JSON.stringifgy()输出的JSON字符串不包含任何空格字符或缩进。如上JSON.parse中的例子。  

在序列化JavaScript对象时，所有函数及原型成员都会被忽略掉，不体现在结果中。此外，值为undefined的任何属性也都会跳过。结果中最终是值为有效JSON数据类型的实例属性。


**语法**

```javascript  
JSON.stringify(value[, replacer [, space]])
``` 

**参数**  

```
value
    将要序列化成 JSON 字符串的值。
replacer 可选
    如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；
	如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中。
	关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。
space 可选
    表示是否在JSON字符串中保留缩进。指定缩进用的空白字符串，用于美化输出（pretty-print）。 

```   

**描述**

```  
关于序列化，有下面五点注意事项：
    1. 非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。
    2. 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。
    3. undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。
    4. 所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。
    5. 不可枚举的属性会被忽略
```  

```javascript  
JSON.stringify({}); 	// '{}'
JSON.stringify(true); 	// 'true'
JSON.stringify([1, "false", false]);   // '[1,"false",false]'  
JSON.stringify({ x: 5 });   // '{"x":5}'
JSON.stringify({x: 5, y: 6});  // '{"x":5,"y":6}'


// 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值
JSON.stringify([new Number(1), new String("false"), new Boolean(false)]);  // '[1,"false",false]'

// undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。
JSON.stringify({x: undefined, y: Object, z: Symbol("")});  // '{}'
JSON.stringify([undefined, Object, Symbol("")]); // '[null,null,null]'

// 所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。

JSON.stringify({[Symbol("foo")]: "foo"}); // {}  
JSON.stringify({[Symbol.for("foo")]: "foo"}, [Symbol.for("foo")]); // '{}'

JSON.stringify({[Symbol.for("foo")]: "foo"}, function (k, v) {	// undefined
  if (typeof k === "symbol"){
    return "a symbol";
  }
});


// 不可枚举的属性会被忽略
JSON.stringify( Object.create(null, { x: { value: 'x', enumerable: false }, y: { value: 'y', enumerable: true } }) ); // '{"y":"y"}'

```


**space 参数**

space 参数用来控制结果字符串里面的间距。如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；如果是一个字符串，则每一级别会比上一级别多缩进用该字符串（或该字符串的前十个字符）

```javascript 
JSON.stringify({ a: 2 }, null, ""); // 没有空格

/*
'{"a":2}'
*/

JSON.stringify({ a: 2 }, null, " "); // 一个空格

/*
'{
 "a": 2
}'
*/

JSON.stringify({ a: 2 }, null, 1);
/*
'{
 "a": 2
}'
*/

// 使用制表符（\t）来缩进
JSON.stringify({ uno: 1, dos : 2 }, null, '\t')

/*
'{            
     "uno": 1,
     "dos": 2  
}'
*/
```


```javascript
book = { "title": "taoxiaotao", "authors": ["nihao"], "edition": 3 }
var jsontText = JSON.stringify(book, null, " - -")


/*

'{
 - -"title": "taoxiaotao",
 - -"authors": [
 - - - -"nihao"
 - -],
 - -"edition": 3
}'

*/
```


### toJSON
给一个对象添加toJSON方法，则返回自身的JSON数据格式。  

```javascript
var obj = {
	foo : "foo",
	age : 28,
	toJSON : function() {
		return this.age;	// 28
	}
};

JSON.stringify(obj);	// '28'
JSON.stringify({"x": obj})  // '{"x":28}'
```  


```javascript
var obj = {
	foo : "foo",
	age : 28,
	toJSON : function() {
		return undefined;
	}
};

JSON.stringify(obj);	// undefined
JSON.stringify({"x": obj})  // '{}'
```